// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CardInfrastructure.Migrations
{
    [DbContext(typeof(CardDbContext))]
    [Migration("20250612171605_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CardLibrary.Models.CardBase", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BinderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Condition")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GradingId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BinderId");

                    b.ToTable("Cards");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CardLibrary.Models.CardBinder", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CardCount")
                        .HasColumnType("int");

                    b.Property<string>("CollectionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollectionId");

                    b.ToTable("Binders");
                });

            modelBuilder.Entity("CardLibrary.Models.CardGrading", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CertificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<DateOnly>("GradedDate")
                        .HasColumnType("date");

                    b.Property<string>("GradingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GradingId")
                        .IsUnique();

                    b.ToTable("Gradings");
                });

            modelBuilder.Entity("CardLibrary.Models.CardImage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlaceholder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserUploaded")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CardId")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("CardLibrary.Models.CardPriceHistory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardValueTrackerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateRecorded")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.HasIndex("CardValueTrackerId");

                    b.ToTable("PriceHistories");
                });

            modelBuilder.Entity("CardLibrary.Models.CardValueTracker", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.PrimitiveCollection<string>("MarketSources")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PercentageChange")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("ValueTrackers");
                });

            modelBuilder.Entity("CardLibrary.Models.Collection", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EstimatedValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Theme")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("CardLibrary.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CardInfrastructure.Models.MagicTheGathering", b =>
                {
                    b.HasBaseType("CardLibrary.Models.CardBase");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("MagicTheGatheringCards", (string)null);
                });

            modelBuilder.Entity("CardLibrary.Models.CardBase", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBinder", "Binder")
                        .WithMany("Cards")
                        .HasForeignKey("BinderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Binder");
                });

            modelBuilder.Entity("CardLibrary.Models.CardBinder", b =>
                {
                    b.HasOne("CardLibrary.Models.Collection", "Collection")
                        .WithMany("Binders")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");
                });

            modelBuilder.Entity("CardLibrary.Models.CardGrading", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBase", "Card")
                        .WithOne("Grading")
                        .HasForeignKey("CardLibrary.Models.CardGrading", "GradingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardLibrary.Models.CardImage", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBase", "Card")
                        .WithOne("Image")
                        .HasForeignKey("CardLibrary.Models.CardImage", "CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardLibrary.Models.CardPriceHistory", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBase", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CardLibrary.Models.CardValueTracker", null)
                        .WithMany("PriceHistory")
                        .HasForeignKey("CardValueTrackerId");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardLibrary.Models.CardValueTracker", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBase", "Card")
                        .WithMany()
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");
                });

            modelBuilder.Entity("CardLibrary.Models.Collection", b =>
                {
                    b.HasOne("CardLibrary.Models.User", "User")
                        .WithMany("Collections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CardInfrastructure.Models.MagicTheGathering", b =>
                {
                    b.HasOne("CardLibrary.Models.CardBase", null)
                        .WithOne()
                        .HasForeignKey("CardInfrastructure.Models.MagicTheGathering", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CardLibrary.Models.CardBase", b =>
                {
                    b.Navigation("Grading");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("CardLibrary.Models.CardBinder", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("CardLibrary.Models.CardValueTracker", b =>
                {
                    b.Navigation("PriceHistory");
                });

            modelBuilder.Entity("CardLibrary.Models.Collection", b =>
                {
                    b.Navigation("Binders");
                });

            modelBuilder.Entity("CardLibrary.Models.User", b =>
                {
                    b.Navigation("Collections");
                });
#pragma warning restore 612, 618
        }
    }
}
